-- Criar tabela experiencias_analise com a mesma estrutura da experiencias_dis
CREATE TABLE public.experiencias_analise (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  titulo TEXT,
  descricao TEXT,
  local CHARACTER VARYING NOT NULL DEFAULT ''::character varying,
  preco REAL,
  img TEXT,
  incluso TEXT,
  id_dono UUID,
  tipo SMALLINT,
  duração TIMESTAMP WITH TIME ZONE,
  quantas_p NUMERIC
);

-- Habilitar RLS na nova tabela
ALTER TABLE public.experiencias_analise ENABLE ROW LEVEL SECURITY;

-- Criar políticas RLS similares à tabela experiencias_dis
CREATE POLICY "Permitir leitura de experiências em análise para todos" 
ON public.experiencias_analise 
FOR SELECT 
USING (true);

CREATE POLICY "Usuários autenticados podem inserir experiências para análise" 
ON public.experiencias_analise 
FOR INSERT 
WITH CHECK (auth.uid() = id_dono);

CREATE POLICY "Usuários podem atualizar suas próprias experiências em análise" 
ON public.experiencias_analise 
FOR UPDATE 
USING (auth.uid() = id_dono);

CREATE POLICY "Usuários podem deletar suas próprias experiências em análise" 
ON public.experiencias_analise 
FOR DELETE 
USING (auth.uid() = id_dono);

-- Criar trigger para atualizar updated_at se necessário
CREATE TRIGGER update_experiencias_analise_updated_at
BEFORE UPDATE ON public.experiencias_analise
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();