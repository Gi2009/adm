{"version":3,"sources":["../src/resource/Authorization.ts","../src/utils.ts","../src/constant.ts","../src/paypal.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios'\nimport { post } from '../utils'\n\nexport async function generateAccessToken(\n  clientId: string,\n  clientSecret: string,\n  requestUrl: string\n): Promise<{\n  access_token: string\n  token_type: string\n  app_id: string\n  expires_in: number\n  nonce: string\n  scope: string\n}> {\n  let config: AxiosRequestConfig = {\n    method: 'post',\n    maxBodyLength: Infinity,\n    url: `${requestUrl}/v1/oauth2/token`,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    data: {\n      grant_type: 'client_credentials',\n      ignoreCache: 'true',\n      return_authn_schemes: 'true',\n      return_client_metadata: 'true',\n      return_unconsented_scopes: 'true',\n    },\n    auth: {\n      username: clientId,\n      password: clientSecret,\n    },\n  }\n  const response = await axios(config)\n  return response.data\n}\n\nexport async function getToken(\n  clientId: string,\n  clientSecret: string,\n  requestUrl: string\n): Promise<string> {\n  const token = await generateAccessToken(clientId, clientSecret, requestUrl)\n  return token.access_token\n}\n\nexport async function terminateAccessToken(\n  token: string,\n  requestUrl: string\n): Promise<void> {\n  await post({\n    url: `${requestUrl}/v1/oauth2/token/terminate`,\n    header: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: 'Bearer ' + token,\n    },\n    data: {\n      token: token,\n      token_type_hint: 'ACCESS_TOKEN',\n    },\n  })\n}\n\n// @todo: imeplement the following methods userInfo\nexport async function userInfo() {\n  console.log('userInfo')\n}\n\n// @todo: imeplement the following methods generateClientToken\nexport async function generateClientToken() {\n  console.log('generateClientToken')\n}\n","import axios, { AxiosHeaderValue } from 'axios'\nimport { Environment, liveUrl, sandboxUrl } from './constant'\n\nexport const getRequestUrl = (environment: Environment) => {\n  return environment === 'sandbox' ? sandboxUrl : liveUrl\n}\n\nconst request = async (method: string, url: string, header: any, data: any) => {\n  const config = {\n    method: method,\n    maxBodyLength: Infinity,\n    url: url,\n    headers: header,\n    data: data,\n  }\n  const response = await axios(config)\n  return response\n}\n\nexport const get = async ({\n  url,\n  header,\n  data,\n}: {\n  url: string\n  header: any\n  data: any\n}) => {\n  const response = await request('get', url, header, data)\n  return response\n}\nexport const post = async ({\n  url,\n  header,\n  data,\n}: {\n  url: string\n  header: any\n  data: any\n}) => {\n  const response = await request('post', url, header, data)\n  return response\n}\n","export const sandboxUrl = 'https://api-m.sandbox.paypal.com'\nexport const liveUrl = 'https://api-m.paypal.com'\n\nexport type Environment = 'sandbox' | 'live'\n","import { Environment } from './constant'\nimport {\n  generateAccessToken,\n  getToken,\n  terminateAccessToken,\n} from './resource/Authorization'\nimport { getRequestUrl } from './utils'\n\nexport class Paypal {\n  clientId: string\n  clientSecret: string\n  environment: Environment\n  requestUrl: string\n\n  authorization: {\n    generateAccessToken: () => Promise<any>\n    getToken: () => Promise<string>\n    terminateAccessToken: (token: string) => Promise<any>\n  }\n  orders: {}\n  payments: {}\n  invoices: {}\n  template: {}\n  products: {}\n  plans: {}\n  subscriptions: {}\n  payouts: {}\n  webhooks: {}\n  shipmentTracking: {}\n  transactionSearch: {}\n  disputes: {}\n  paymentMethodsTokens: {}\n\n  constructor({\n    clientId,\n    clientSecret,\n    environment,\n  }: {\n    clientId: string\n    clientSecret: string\n    environment: Environment\n  }) {\n    this.clientId = clientId\n    this.clientSecret = clientSecret\n    this.environment = environment\n    this.requestUrl = getRequestUrl(environment)\n\n    // method binding\n    this.authorization = this._authorization\n    this.orders = {}\n    this.payments = {}\n    this.invoices = {}\n    this.template = {}\n    this.products = {}\n    this.plans = {}\n    this.subscriptions = {}\n    this.payouts = {}\n    this.webhooks = {}\n    this.shipmentTracking = {}\n    this.transactionSearch = {}\n    this.disputes = {}\n    this.paymentMethodsTokens = {}\n  }\n\n  private _authorization = {\n    generateAccessToken: async () =>\n      await generateAccessToken(\n        this.clientId,\n        this.clientSecret,\n        this.requestUrl\n      ),\n    getToken: async () =>\n      await getToken(this.clientId, this.clientSecret, this.requestUrl),\n    terminateAccessToken: async (token: string) =>\n      await terminateAccessToken(token, this.requestUrl),\n  }\n\n  private async getToken() {\n    return await getToken(this.clientId, this.clientSecret, this.requestUrl)\n  }\n\n  private async revokeToken(token: string): Promise<void> {\n    await terminateAccessToken(token, this.requestUrl)\n  }\n}\n","import { Paypal } from './paypal'\n\nexport default Paypal\n"],"mappings":"AAAA,OAAOA,MAAmC,QCA1C,OAAOC,MAAiC,QCAjC,IAAMC,EAAa,mCACbC,EAAU,2BDEhB,IAAMC,EAAiBC,GACrBA,IAAgB,UAAYC,EAAaC,EAG5CC,EAAU,MAAOC,EAAgBC,EAAaC,EAAaC,IAQ9C,MAAMC,EAPR,CACb,OAAQJ,EACR,cAAe,IACf,IAAKC,EACL,QAASC,EACT,KAAMC,CACR,CACmC,EAgB9B,IAAME,EAAO,MAAO,CACzB,IAAAC,EACA,OAAAC,EACA,KAAAC,CACF,IAKmB,MAAMC,EAAQ,OAAQH,EAAKC,EAAQC,CAAI,EDrC1D,eAAsBE,EACpBC,EACAC,EACAC,EAQC,CACD,IAAIC,EAA6B,CAC/B,OAAQ,OACR,cAAe,IACf,IAAK,GAAGD,CAAU,mBAClB,QAAS,CACP,eAAgB,mCAClB,EACA,KAAM,CACJ,WAAY,qBACZ,YAAa,OACb,qBAAsB,OACtB,uBAAwB,OACxB,0BAA2B,MAC7B,EACA,KAAM,CACJ,SAAUF,EACV,SAAUC,CACZ,CACF,EAEA,OADiB,MAAMG,EAAMD,CAAM,GACnB,IAClB,CAEA,eAAsBE,EACpBL,EACAC,EACAC,EACiB,CAEjB,OADc,MAAMH,EAAoBC,EAAUC,EAAcC,CAAU,GAC7D,YACf,CAEA,eAAsBI,EACpBC,EACAL,EACe,CACf,MAAMM,EAAK,CACT,IAAK,GAAGN,CAAU,6BAClB,OAAQ,CACN,eAAgB,oCAChB,cAAe,UAAYK,CAC7B,EACA,KAAM,CACJ,MAAOA,EACP,gBAAiB,cACnB,CACF,CAAC,CACH,CGtDO,IAAME,EAAN,KAAa,CAyBlB,YAAY,CACV,SAAAC,EACA,aAAAC,EACA,YAAAC,CACF,EAIG,CAuBH,KAAQ,eAAiB,CACvB,oBAAqB,SACnB,MAAMC,EACJ,KAAK,SACL,KAAK,aACL,KAAK,UACP,EACF,SAAU,SACR,MAAMC,EAAS,KAAK,SAAU,KAAK,aAAc,KAAK,UAAU,EAClE,qBAAsB,MAAOC,GAC3B,MAAMC,EAAqBD,EAAO,KAAK,UAAU,CACrD,EAjCE,KAAK,SAAWL,EAChB,KAAK,aAAeC,EACpB,KAAK,YAAcC,EACnB,KAAK,WAAaK,EAAcL,CAAW,EAG3C,KAAK,cAAgB,KAAK,eAC1B,KAAK,OAAS,CAAC,EACf,KAAK,SAAW,CAAC,EACjB,KAAK,SAAW,CAAC,EACjB,KAAK,SAAW,CAAC,EACjB,KAAK,SAAW,CAAC,EACjB,KAAK,MAAQ,CAAC,EACd,KAAK,cAAgB,CAAC,EACtB,KAAK,QAAU,CAAC,EAChB,KAAK,SAAW,CAAC,EACjB,KAAK,iBAAmB,CAAC,EACzB,KAAK,kBAAoB,CAAC,EAC1B,KAAK,SAAW,CAAC,EACjB,KAAK,qBAAuB,CAAC,CAC/B,CAeA,MAAc,UAAW,CACvB,OAAO,MAAME,EAAS,KAAK,SAAU,KAAK,aAAc,KAAK,UAAU,CACzE,CAEA,MAAc,YAAYC,EAA8B,CACtD,MAAMC,EAAqBD,EAAO,KAAK,UAAU,CACnD,CACF,EClFA,IAAOG,EAAQC","names":["axios","axios","sandboxUrl","liveUrl","getRequestUrl","environment","sandboxUrl","liveUrl","request","method","url","header","data","axios","post","url","header","data","request","generateAccessToken","clientId","clientSecret","requestUrl","config","axios","getToken","terminateAccessToken","token","post","Paypal","clientId","clientSecret","environment","generateAccessToken","getToken","token","terminateAccessToken","getRequestUrl","src_default","Paypal"]}